// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  output     = "../.prisma/client"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Employee {
  employeeId      Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  email           String           @unique
  password        String
  firstName       String
  middleInitial   String?
  lastName        String
  occupation      String
  serviceRequests ServiceRequest[]
}

//**
 //* Each type of service request inherits from ServiceRequest
 //* Only translator requests for Iteration 1
 //*/
model ServiceRequest {
  requestId          Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  // tables that inherit from ServiceRequest:
  translatorRequest  TranslatorRequest[]
  // assigned relationship to Employee:
  assignedEmployeeId Int?
  assignedEmployee   Employee?           @relation(fields: [assignedEmployeeId], references: [employeeId])
}

model TranslatorRequest {
  languageFrom     String
  languageTo       String
  roomNum          String
  startDateTime    DateTime
  endDateTime      DateTime
  // link to service request:
  serviceRequestId Int            @unique
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [requestId])
}

enum RequestType {
  TranslatorRequest
}

model Department {
  departmentId      Int     @id @default(autoincrement())
  name              String
  floor             Int
  suite             String
  specialtyServices String
  hours             String?
  telephone         String
}


//currently based on the ERD however it fails upon implementation because triggers are not supported by prisma
model Node{
  nodeId    Int     @id @default(autoincrement())
  name      String
  xCoord    Int
  yCoord    Int
  edgeStart Edge[]  @relation(name: "edgeS")
  edgeEnd   Edge[]  @relation(name: "edgeE")
  // edgeId  Int?
  // edges   Edge?  @relation(fields: [edgeId], references: [edgeId])
}
//needs a trigger to make sure that and edge can only have two nodes
//needs some kind of relation with node so that if a node gets deleted it deletes the edge
//essentially needs some kind of way to keep track fo the number of the Nodes
model Edge{
  edgeId      Int     @default(autoincrement())
  weight      Int
  startNodeId Int     @unique
  endNodeId   Int     @unique
  startNode   Node    @relation(name: "edgeS", fields: [startNodeId], references: [nodeId], onDelete: Cascade)
  endNode     Node    @relation(name: "edgeE", fields: [endNodeId], references: [nodeId], onDelete: Cascade)
  // Nodes       Node[]
}


